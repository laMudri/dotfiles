((("OO-lemma" .
   [2 0 0 0 0 0 0 0])
  ("Bin" .
   [1 0 0])
  ("zipWith" .
   [0 0 0 3 0 0 0])
  ("smap" .
   [3 0 0 0])
  ("tail" .
   [7 0 0 1])
  ("head" .
   [8 0 0 0])
  ("Stream" .
   [0 0 0 1 0 3])
  ("fibs" .
   [1 0 0 0])
  ("PropEq" .
   [0 0 0 0 0 1])
  ("+-comm" .
   [0 0 1 0 0 0])
  ("Nat" .
   [1 0 0])
  ("abc" .
   [1 0 0])
  ("*-left-distr-+" .
   [0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("*-assoc" .
   [0 0 0 1 2 0 0])
  ("+-assoc" .
   [0 0 1 1 1 0 0])
  ("Org" .
   [12 0 0])
  ("parityNotNotUnique" .
   [0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0])
  ("contra" .
   [2 0 0 0 1 0])
  ("oddProofsDifferent" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0])
  ("evenProofsDifferent" .
   [0 0 0 0 0 2 0 0 0 0 0 0 0 0 0 0 0 0 1])
  ("prf'" .
   [3 0 0 0])
  ("prf" .
   [7 0 0])
  ("succInjective" .
   [0 0 1 1 4 0 0 0 0 0 0 0 0])
  ("refl" .
   [1 0 0 0])
  ("zeroNotOdd" .
   [0 0 0 0 1 0 0 0 0 0])
  ("Unit" .
   [1 0 0 0])
  ("Data" .
   [2 0 1 0])
  ("notEvenAndOdd" .
   [0 0 0 1 1 0 0 0 0 0 0 0 1])
  ("isEven" .
   [0 0 2 0 0 0])
  ("False" .
   [2 0 0 0 0])
  ("True" .
   [2 0 0 0])
  ("where" .
   [2 0 0 1 0])
  ("Bool" .
   [4 0 0 0])
  ("data" .
   [1 0 0 0])
  ("IsEven" .
   [0 0 2 2 0 0])
  ("Set" .
   [6 0 0])
  ("parityUnique" .
   [0 0 0 0 0 0 0 3 0 0 0 1])
  ("parity" .
   [8 0 0 0 0 1])
  ("plusAssociative" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 1])
  ("multDistrLeft" .
   [0 0 0 3 1 0 0 0 0 0 0 0 0])
  ("infixl" .
   [1 0 0 0 0 0])
  ("sym" .
   [8 0 0])
  ("psuccsucc" .
   [2 0 0 0 0 0 1 0 2])
  ("Even" .
   [12 0 2 0])
  ("Odd" .
   [6 0 0])
  ("psucc" .
   [5 0 0 0 0])
  ("addEvenOdd" .
   [0 0 0 0 0 0 0 0 1 0])
  ("Parity" .
   [4 0 2 12 2 6])
  ("plusCommutative" .
   [0 0 0 0 0 1 0 0 0 0 0 0 0 0 0])
  ("cong" .
   [9 0 0 1])
  ("plusSuccRightSucc" .
   [0 0 0 0 0 6 0 0 0 0 0 0 0 0 0 0 7])
  ("rewrite" .
   [10 0 0 5 2 2 0])
  ("addEvenEvenLemma" .
   [0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 1])
  ("Binary" .
   [0 0 1 2 0 0])
  ("Relation" .
   [0 0 0 3 0 0 0 0])
  ("import" .
   [4 0 2 3 0 0])
  ("open" .
   [7 0 2 0])
  ("let" .
   [3 0 0])
  ("add2Parity" .
   [0 0 0 0 1 0 0 0 0 0])
  ("parityUniqueEvenStep" .
   [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2])
  ("≅-to-≡" .
   [0 0 0 0 0 1])
  ("load" .
   [1 0 0 0])))
