\documentclass[11pt]{article}
%Gummi|063|=)
\title{\textbf{Object oriented programming -- supervision 1}}
\author{James Wood}
\usepackage{listings}

\begin{document}

\maketitle

\section{a}
\paragraph{}\begin{enumerate}
  \item The typical imperative language encourages mutation of variables. The typical functional language doesn't.
  \item The typical imperative language doesn't treat functions as it would values. The typical functional language does.
  \item The typical imperative language has built-in structures for iteration. The typical functional language relies on higher-order functions and recursion.
\end{enumerate}

\section{b}
\paragraph{}\lstinputlisting[language=java]{code/S1b.java}
\paragraph{}The \texttt{main} method calls itself immediately without any change in parameters. Logically, this puts the program into an infinite loop, but in practice, since each function call is designated a distinct area on the (finite) stack, an exeption is thrown when there is no more space on the stack.

\section{c}
\paragraph{}If one tries to read from or write to a \texttt{null} reference, an exception is thrown. With a misplaced pointer, reading or writing will have an unforeseen effect.

\section{c}
\paragraph{}The stack is used to store primitive values, including references and arrays. The heap is used to store objects. Only values on the stack can be directly assigned to in Java. Values on the heap need to be created via a constructor.

\section{D}
\paragraph{}

\end{document}
