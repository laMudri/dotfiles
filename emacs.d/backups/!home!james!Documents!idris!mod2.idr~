module mod2
  data Mod : Nat -> Type where
    mkMod : Fin m -> Mod m
  
  total
  natToFin : (j : Nat) -> {auto p : j `LT` n} -> Fin n
  natToFin {n = (S k)} Z = FZ
  natToFin {n = (S k)} (S j) {p = (LTESucc x)} = FS (natToFin j)

  {-natToMod : {m : Nat} -> Nat -> Mod m
  natToMod {m} k with (choose (k < m))
    natToMod k | (Left Oh) = mkMod k
    natToMod {m} k | (Right Oh) = natToMod (k - m)-}
  
  {-plus : Mod m -> Mod m -> Mod m
  plus {m} (mkMod j) (mkMod k) with (choose (j + k < m))
    plus (mkMod j) (mkMod k) | (Left Oh) = mkMod (j + k)
    plus {m} (mkMod j) (mkMod k) | (Right Oh) = mkMod (j + k - m)
                                                      {p=?plus_proof}-}
  
  
 
 
