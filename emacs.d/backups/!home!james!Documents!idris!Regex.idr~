module Regex
data Regex a = Literal a
             | Concat (Regex a) (Regex a)
             | Alt (Regex a) (Regex a)
             | Star (Regex a)

data RegexMatch : Regex a -> List a -> Type where
  LiteralM : (x : a) -> RegexMatch (Literal x) [x]
  ConcatM : (xm : RegexMatch xr xs) -> (ym : RegexMatch yr ys) ->
            RegexMatch (Concat xr yr) (xs ++ ys)
  AltLeftM : (xm : RegexMatch xr xs) -> RegexMatch (Alt xr yr) xs
  AltRightM : (ym : RegexMatch yr ys) -> RegexMatch (Alt yr yr) ys
  StarBaseM : RegexMatch (Star r) []
  StarStepM : (xm : RegexMatch xr xs) -> (ym : RegexMatch (Star xs) ys) ->
              RegexMatch (Star xs) (xs ++ ys)

match : (xr : Regex a) -> (xs : List a) -> Dec (RegexMatch xr xs)
