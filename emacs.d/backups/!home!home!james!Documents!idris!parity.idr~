module parity

data Parity : Nat -> Type where
     Even : (n : Nat) -> Parity (n + n)
     Odd : (n : Nat) -> Parity (S (n + n))

parity : (k : Nat) -> Parity k
parity Z = Even Z
parity (S Z) = Odd Z
parity (S (S k)) with (parity k)
  parity (S (S (plus n n))) | (Even n) ?= Even (S n)
  parity (S (S (S (plus n n)))) | (Odd n) ?= Odd (S n)

succThroughPlus : (m : Nat) -> (n : Nat) -> S m + S n = S (S (m + n))
succThroughPlus Z n = ?succThroughPlus_rhs_1
succThroughPlus (S k) n = ?succThroughPlus_rhs_2

---------- Proofs ----------

parity.succThroughPlus_rhs_1 = proof
  intros
  trivial

