module intervals

syntax "<|" [x] ".." [y] "|>" = [Prelude.succ x .. Prelude.pred y]
syntax "<=|" [x] ".." [y] "|>" = [x .. Prelude.pred y]
syntax "<|" [x] ".." [y] "|=>" = [Prelude.succ x .. y]
syntax "<=|" [x] ".." [y] "|=>" = [x .. y]

data Interval : Type -> Type where
     mkInterval : Ord a => Bool -> (x : a) -> (y : a) -> Bool
                        -> so (x <= y) -> Interval a

elem : Ord a => a -> Interval a -> Bool
elem e (mkInterval l x y u oh) =
     (x < e || (l && x == e)) && (e < y || (u && x == e))

syntax "<|" [x] "," [y] "|>" = mkInterval False x y False ?cc_lemma
syntax "<=|" [x] "," [y] "|>" = mkInterval True x y False ?oc_lemma
syntax "<|" [x] "," [y] "|=>" = mkInterval False x y True ?co_lemma
syntax "<=|" [x] "," [y] "|=>" = mkInterval True x y True ?oo_lemma
