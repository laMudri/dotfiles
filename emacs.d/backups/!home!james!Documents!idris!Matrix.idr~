module Matrix
import Data.Vect
import Data.Fin
%default total

Matrix : Nat -> Nat -> Type -> Type
Matrix m n a = Vect n (Vect m a)
%name Matrix xss,yss,zss

--transpose : Matrix m n a -> Matrix n m a
--transpose [] = replicate _ []
--transpose (x :: xs) = zipWith (::) x (Matrix.transpose xs)

multiplyColumn : Num a => Matrix m n a -> Vect m a -> Vect n a
multiplyColumn xss ys = map (sum . zipWith (*) ys) xss

multiplyRow : Num a => Vect m a -> Matrix m n a -> Vect n a
multiplyRow xs yss = ?multiplyRow_rhs

multiply : Num a => Matrix i j a -> Matrix j k a -> Matrix i k a

instance Num a => Num (Matrix m m a) where
  (+) = zipWith (zipWith (+))
  (-) = zipWith (zipWith (-))
  (*) [] [] = []
  (*) (x :: xs) y = ?Num_rhs_2
  abs x = ?Num_rhs_4
  fromInteger x = ?Num_rhs_5
