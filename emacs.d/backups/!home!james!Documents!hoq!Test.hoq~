import examples.Paths

data Nat = Z | S Nat

id : {a : Type} -> a -> a
id a x = x
(.) : {a b c : Type} -> (b -> c) -> (a -> b) -> a -> c
(.) a b c f g x = f (g x)

ext-dep : (A : Type) -> (B : A -> Type) ->
      (f g : (a : A) -> B a) -> ((a : A) -> f a = g a) -> f = g
ext-dep A B f g p = path (\i a -> p a @ i)
ext : {A B : Type} -> (f g : A -> B) -> ((a : A) -> f a = g a) -> f = g
ext A B = ext-dep A (\_ -> B)

plus : Nat -> Nat -> Nat
plus Z = id
plus (S n) = S . plus n

plusZeroRightNeutral : (n : Nat) -> plus n Z = n
plusZeroRightNeutral Z = idp
plusZeroRightNeutral (S n) = pmap S (plusZeroRightNeutral n)

plusSuccRightSucc : (m n : Nat) -> plus m (S n) = S (plus m n)
plusSuccRightSucc Z n = idp
plusSuccRightSucc (S m) n = pmap S (plusSuccRightSucc m n)

plus' : Nat -> Nat -> Nat
plus' m Z = m
plus' m (S n) = S (plus' m n)

plus-is-plus'-lemma : (m n : Nat) -> plus m n = plus' m n
plus-is-plus'-lemma m Z = plusZeroRightNeutral m
plus-is-plus'-lemma m (S n) =
  plusSuccRightSucc m n * pmap S (plus-is-plus'-lemma m n)

plus-is-plus' : plus = plus'
plus-is-plus' =
  ext plus plus' (\m -> ext (plus m) (plus' m) (plus-is-plus'-lemma m))

-- Bools:

data Bool = False | True

not : Bool -> Bool
not False = True
not True = False

not-not : (x : Bool) -> not (not x) = x
not-not False = idp
not-not True = idp

bool-equiv-not-bool : Bool = Bool
bool-equiv-not-bool = path (iso Bool Bool not not not-not not-not)

and : Bool -> Bool -> Bool
and True True = True
and _ _ = False

or : Bool -> Bool -> Bool
or False False = False
or _ _ = True