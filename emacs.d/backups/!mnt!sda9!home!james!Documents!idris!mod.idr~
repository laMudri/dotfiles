module mod
  data Mod : Nat -> Type where
       mkMod : (m : Nat) -> Nat -> Mod m

  total
  matMod : (m : Nat) -> Nat -> Mod m
  {- natMod m n with (n < m)
         | True = mkMod m n
         | False = natMod m (n - m) -}
  natMod m n = mkMod m (n `mod` m)

  instance Eq (Mod m) where
           (mkMod _ n0) == (mkMod _ n1) = n0 == n1

  plus : Mod m -> Mod m -> Mod m
  plus (mkMod m k) (mkMod m j) with (choose (k + j < m))
    plus (mkMod m k) (mkMod m j) | (Left Oh) = mkMod m (k + j)
    plus (mkMod m k) (mkMod m j) | (Right Oh) = mkMod m (k + j - m)

  instance Num (Mod m) where
           --(mkMod _ n0) + (mkMod _ n1) with (choose (n0 + n1 < m))
           --  (mkMod _ n0) + (mkMod _ n1) | with_pat = ?+_rhs
               {-| True = mkMod _ (n0 + n1)
               | False = mkMod _ (n0 + n1 - m)-}
           {- (mkMod m n0) - (mkMod m n1) with (0 <= n0 - n1)
               | True = mkMod _ (n0 - n1)
               | False = mkMod _ (m + n0 - n1) -}
           (mkMod _ n0) + (mkMod _ n1) = natMod _ (n0 + n1)
           (mkMod _ n0) - (mkMod _ n1) = natMod _ (n0 - n1)
           (mkMod _ n0) * (mkMod _ n1) = natMod _ (n0 * n1)
           abs = id
           fromInteger = natMod _ . fromInteger
